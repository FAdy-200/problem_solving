# https://leetcode.com/problems/partition-equal-subset-sum/
from typing import *
from functools import cache


class Solution:
    def canPartitionOld(self, nums: List[int]) -> bool:
        su = [sum(nums[i:]) for i in range(len(nums))]
        if su[0] % 2:
            return False
        su[0] = su[0] // 2
        n = len(nums)
        d = {}

        # @cache
        def DB(so_far, i):
            if (so_far, i) in d:
                return d[(so_far, i)]
            if so_far == su[0]:
                d[(so_far, i)] = True
                return True
            for j in range(i, n):
                if so_far + nums[j] <= su[0] <= so_far + su[j]:
                    if DB(so_far + nums[j], j + 1):
                        d[(so_far, i)] = True
                        return True
            d[(so_far, i)] = True
            return False

        return DB(nums[0], 1)

    def canPartition(self, nums: List[int]) -> bool:
        su2 = sum(nums)
        if su2 % 2:
            return False
        su = su2 // 2
        n = len(nums)
        nums.sort()

        @cache
        def DB(so_far: int, i: int) -> bool:
            if so_far < su or i < 0:
                return False
            if so_far == su:
                return True
            return DB(so_far - nums[i], i - 1) or DB(so_far, i - 1)
        return DB(su2, n - 1)


S = Solution()
Z = S.canPartition(
    [5, 79, 2, 4, 8, 16, 32, 64, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
     100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
     100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
     100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
     100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
     100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
     100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
     100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
     100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])
# Z = 1
# X = 1
X = S.canPartition(
    [4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20,
     20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 28, 28, 28, 28, 28, 28, 28, 28, 32, 32, 32, 32, 32, 32,
     32, 32, 36, 36, 36, 36, 36, 36, 36, 36, 40, 40, 40, 40, 40, 40, 40, 40, 44, 44, 44, 44, 44, 44, 44, 44, 48, 48, 48,
     48, 48, 48, 48, 48, 52, 52, 52, 52, 52, 52, 52, 52, 56, 56, 56, 56, 56, 56, 56, 56, 60, 60, 60, 60, 60, 60, 60, 60,
     64, 64, 64, 64, 64, 64, 64, 64, 68, 68, 68, 68, 68, 68, 68, 68, 72, 72, 72, 72, 72, 72, 72, 72, 76, 76, 76, 76, 76,
     76, 76, 76, 80, 80, 80, 80, 80, 80, 80, 80, 84, 84, 84, 84, 84, 84, 84, 84, 88, 88, 88, 88, 88, 88, 88, 88, 92, 92,
     92, 92, 92, 92, 92, 92, 96, 96, 96, 96, 96, 96, 96, 96, 97, 99])
print(Z, X)
